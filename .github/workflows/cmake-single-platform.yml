on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


# Copyright (c) 2021-2022-2023-2024 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of this repository.
# The workflow runs on x64 and ARM platforms.
# Workflow steps:
# - Setup vcpkg and cache it on the GitHub Action cloud based cache.
# - Runs CMake with CMakePreset.json using a presest configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg
#   to install dependencies described by the vcpkg.json manifest file.
#   This stage also runs vcpkg with Binary Caching leveraging GitHub Action cache to
#   store the built packages artifacts, hence it will be a no-op if those are restored
#   from cache (e.g., already previously built).
# - Finally builds the sources with Ninja, and tests as well.
name: hosted-ninja-vcpkg_submod-autocache
on:
  push:
    - main
  pull_request:
    - main

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-2022]
    #env:
    #
    # [OPTIONAL] Define the vcpkg's triplet
    # you want to enforce, otherwise the default one
    # for the hosting system will be automatically
    # choosen (x64 is the default on all platforms,
    # e.g. x64-osx).
    # VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the additional `--config` flag, e.g.:
      #   buildPreset: 'ninja-vcpkg'
      #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
      #   testPreset: 'ninja-vcpkg'
      #   testPresetAdditionalArgs: "[`--config`, `Release`]"
      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
          testPreset: 'test-release'



jobs:
  build:
    steps:
    - uses: lukka/get-cmake@latest

      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11 # Always specify the specific _version_ of the
                                  # action you need, `v11` in this case to stay up
                                  # to date with fixes on the v11 branch.
      #with:
        # This is the default location of the directory containing vcpkg sources.
        # Change it to the right location if needed.
        # vcpkgDirectory: '${{ github.workspace }}/vcpkg'

        # If not using a Git submodule for vcpkg sources, this input
        # specifies which commit id to checkout from a Git repo.
        # Notes: 
        # - it must _not_ be set if using a Git submodule for vcpkg.
        # - if not provided, the `vcpkgConfigurationJsonGlob` or `vcpkgJsonGlob`
        #   are being used to locate either a vcpkg-configuration.json or vcpkg.json
        #   in order to use the builtin-baseline or the default-registry's
        #   builtin baseline.
        # vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'

        # This is only needed if the command `vcpkg install` must run at this step.
        # Instead it is highly suggested to let `run-cmake` to run vcpkg later on
        # using the vcpkg.cmake toolchain. The default is `false`.
        # runVcpkgInstall: true

        # This is only needed if `runVpkgInstall` is `true`.
        # This glob expression used to locate the vcpkg.json and  use
        # its directory location as `working directory` when running `vcpkg install`.
        # Change it to match a single manifest file you want to use.
        # Note: do not use `${{ github.context }}` to compose the value as it
        # contains backslashes that would be misinterpreted. Instead
        # compose a value relative to the root of the repository using
        # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
        # vcpkgJsonGlob: '**/vcpkg.json'

    - name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
      uses: lukka/run-cmake@v10
      with:
        # This is the default path to the CMakeLists.txt along side the
        # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
        # located elsewhere.
        # cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

        # You could use CMake workflow presets defined in the CMakePresets.json
        # with just this line below. Note this one cannot be used with any other
        # preset input, it is mutually exclusive.
        # workflowPreset: 'workflow-name'

        # This is the name of the CMakePresets.json's configuration to use to generate
        # the project files. This configuration leverages the vcpkg.cmake toolchain file to
        # run vcpkg and install all dependencies specified in vcpkg.json.
        configurePreset: 'ninja-multi-vcpkg'
        # Additional arguments can be appended to the cmake command.
        # This is useful to reduce the number of CMake's Presets since you can reuse
        # an existing preset with different variables.
        configurePresetAdditionalArgs: "['-DENABLE_YOUR_FEATURE=1']"

        # This is the name of the CMakePresets.json's configuration to build the project.
        buildPreset: 'ninja-multi-vcpkg'
        # Additional arguments can be appended when building, for example to specify the
        # configuration to build.
        # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
        buildPresetAdditionalArgs: "['--config Release']"

        # This is the name of the CMakePresets.json's configuration to test the project with.
        testPreset: 'ninja-multi-vcpkg'
        # Additional arguments can be appended when testing, for example to specify the config
        # to test.
        # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
        testPresetAdditionalArgs: "['--config Release']"

env:
  #  [OPTIONAL] Define the vcpkg's triplet you want to enforce, otherwise the default one
  #  for the hosting system will be automatically choosen (x64 is the default on all
  #  platforms, e.g. `x64-osx`).
  VCPKG_DEFAULT_TRIPLET: ${{ x64-windows-static }}
  #
  #  [OPTIONAL] If VCPKG_DEFAULT_TRIPLET is defined then it may also be desirable to set the host
  #  triplet to avoid unintended cross compiling behavior.
  VCPKG_DEFAULT_HOST_TRIPLET: ${{ x64-windows-static }}
  #
  #  [OPTIONAL] By default the action disables vcpkg's telemetry by defining VCPKG_DISABLE_METRICS.
  #  This behavior can be disabled by defining `VCPKG_ENABLE_METRICS` as follows.
  #  VCPKG_ENABLE_METRICS: 1
  #

